#region Task 1
// Verilmish ededin mertebelerinin en boyuyunu tapan alqoritm
// Misal: input 7481, output 8

//int num = Convert.ToInt32(Console.ReadLine());
//int maxDigit = 0;

//while (num > 0)
//{
//    int digit = num % 10;
//    if (digit > maxDigit)
//    {
//        maxDigit = digit;
//    }
//    num /= 10;
//}

//Console.WriteLine(maxDigit);
#endregion

#region Task2
// Verilmish ededin 2 quvveti olub olmadigini tapan alqoritm
// Misal: input 8 output 2-in quvvetidir ve ya input 9 2-in quvveti deyil

//int num = Convert.ToInt32(Console.ReadLine());
//int powerOfTwo = 1;
//bool isPowerOfTwo = false;

//while (powerOfTwo <= num)
//{
//    if (powerOfTwo == num)
//    {
//        isPowerOfTwo = true;
//        Console.WriteLine(num + " is a power of two");
//        break;
//    }
//    powerOfTwo *= 2;
//}

//if (!isPowerOfTwo)
//{
//    Console.WriteLine(num + " is NOT a power of two");
//}
#endregion

#region Task 3
// Verilmish arrayda en kicik ve en boyuk ededlerin cemini cixaran alogirthm

//int[] nums = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

//int min = nums[0];
//int max = nums[0];

//for (int i = 0; i < nums.Length; i++)
//{
//    if (nums[i] < min)
//    {
//        min = nums[i];
//    }

//    if (nums[i] > max)
//    {
//        max = nums[i];
//    }
//}

//Console.WriteLine(min + max);
#endregion

#region Task 4
// Verilmish arrayda hem tek eded olan,
// hem de 3-e bolunen ededlerin sayini cixaran algorithm

//int[] nums = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//int count = 0;

//for (int i = 0; i < nums.Length; i++)
//{
//    if (nums[i] % 2 == 1 && nums[i] % 3 == 0)
//    {
//        count++;
//    }
//}

//Console.WriteLine(count);
#endregion

#region Task 5
// Verilmish arrayda murekkeb ededlerin sayini cixaran algorithm misal:input {5,9,12,11} output 2

//int[] nums = { 5, 9, 12, 11, 12, 13, 14 };
//int count = 0;

//for (int i = 0; i < nums.Length; i++)
//{
//    // 0, 1 are neither prime, nor composite.
//    // 2 and 3 are prime.
//    if (nums[i] <= 3) { continue; }

//    for (int j = 2; j <= nums[i] / 2; j++)
//    {
//        if (nums[i] % j == 0)
//        {
//            count++;
//            break;
//        }
//    }
//}

//Console.WriteLine(count);
#endregion
